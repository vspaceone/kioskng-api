AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  kioskng-api
  Sample SAM Template for kioskng-api

Parameters:
  Stage:
    Type: String
    Default: test
    AllowedValues:
      - test
      - prod
    Description: Whether you want to deploy on test or prod
  UserPoolId:
    Type: String
    Description: The cognito user pool id of your user pool.
  ClientId:
    Type: String
    Description: The cognito client id of your client.


Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        RUNTIME_REGION: !Ref AWS::Region
        DYNAMODB_TABLE_ACCOUNTS: accounts
        DYNAMODB_TABLE_MEDIA_MAPPINGS: media-mappings
        DYNAMODB_TABLE_PRODUCTS: products
        DYNAMODB_TABLE_TRANSACTIONS: transactions
        COGNITO_USER_POOL_ID: !Ref UserPoolId
        COGNITO_CLIENT_ID: !Ref ClientId

Resources:
  ProductsDynamoDBAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ProductDynamoDBAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ReadWriteTable
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: 
              - arn:aws:dynamodb:*:*:table/products
              - arn:aws:dynamodb:*:*:table/products/index/*
          - Sid: GetStreamRecords
            Effect: Allow
            Action:
              - dynamodb:GetRecords
            Resource: arn:aws:dynamodb:*:*:table/products/stream/*
          - Sid: WriteLogStreamsAndGroups
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Sid: CreateLogGroup
            Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: "*"

  ProductService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [ '-', ['ProductService', !Ref Stage]]
      CodeUri: src/integrated-services
      Handler: products/app.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - !Ref ProductsDynamoDBAccess
  
  AccountsDynamoDBAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ProductDynamoDBAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ReadWriteTable
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: 
              - arn:aws:dynamodb:*:*:table/accounts
              - arn:aws:dynamodb:*:*:table/accounts/index/*
          - Sid: GetStreamRecords
            Effect: Allow
            Action:
              - dynamodb:GetRecords
            Resource: arn:aws:dynamodb:*:*:table/accounts/stream/*
          - Sid: WriteLogStreamsAndGroups
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Sid: CreateLogGroup
            Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: "*"

  AccountService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [ '-', ['AccountService', !Ref Stage]]
      CodeUri: src/integrated-services
      Handler: accounts/app.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - !Ref AccountsDynamoDBAccess

  MediaMappingsDynamoDBAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ProductDynamoDBAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Read own table
          - Sid: ReadWriteOwnTable
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: 
              - arn:aws:dynamodb:*:*:table/media-mappings
              - arn:aws:dynamodb:*:*:table/media-mappings/index/*
          - Sid: GetStreamRecordsOwn
            Effect: Allow
            Action:
              - dynamodb:GetRecords
            Resource: arn:aws:dynamodb:*:*:table/media-mappings/stream/*
          # Read accounts table
          - Sid: ReadAccountsTable
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: 
              - arn:aws:dynamodb:*:*:table/accounts
              - arn:aws:dynamodb:*:*:table/accounts/index/*
          - Sid: GetStreamRecordsAccounts
            Effect: Allow
            Action:
              - dynamodb:GetRecords
            Resource: arn:aws:dynamodb:*:*:table/accounts/stream/*
          # CloudWatch
          - Sid: WriteLogStreamsAndGroups
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Sid: CreateLogGroup
            Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: "*"

  MediaMappingService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [ '-', ['MediaMappingService', !Ref Stage]]
      CodeUri: src/integrated-services
      Handler: media-mappings/app.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - !Ref MediaMappingsDynamoDBAccess
  
  TransactionsDynamoDBAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ProductDynamoDBAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Read/Write own table
          - Sid: ReadWriteOwnTable
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: 
              - arn:aws:dynamodb:*:*:table/transactions
              - arn:aws:dynamodb:*:*:table/transactions/index/*
          - Sid: GetStreamRecordsOwn
            Effect: Allow
            Action:
              - dynamodb:GetRecords
            Resource: arn:aws:dynamodb:*:*:table/transactions/stream/*
          # Read accounts table
          - Sid: ReadAccountsTable
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: 
              - arn:aws:dynamodb:*:*:table/accounts
              - arn:aws:dynamodb:*:*:table/accounts/index/*
          - Sid: GetStreamRecordsAccounts
            Effect: Allow
            Action:
              - dynamodb:GetRecords
            Resource: arn:aws:dynamodb:*:*:table/accounts/stream/*
          # Read products table
          - Sid: ReadProductsTable
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: 
              - arn:aws:dynamodb:*:*:table/products
              - arn:aws:dynamodb:*:*:table/products/index/*
          - Sid: GetStreamRecordsProducts
            Effect: Allow
            Action:
              - dynamodb:GetRecords
            Resource: arn:aws:dynamodb:*:*:table/products/stream/*
          # CloudWatch
          - Sid: WriteLogStreamsAndGroups
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Sid: CreateLogGroup
            Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: "*"

  TransactionService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [ '-', ['TransactionService', !Ref Stage]]
      CodeUri: src/integrated-services
      Handler: transactions/app.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - !Ref TransactionsDynamoDBAccess

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [ '-', ['Authorizer', !Ref Stage]]
      CodeUri: src/authorizer
      Handler: app.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64